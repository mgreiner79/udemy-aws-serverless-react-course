"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpaceStack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const path_1 = require("path");
const aws_apigateway_1 = require("aws-cdk-lib/aws-apigateway");
const GenericTable_1 = require("./GenericTable");
const aws_lambda_nodejs_1 = require("aws-cdk-lib/aws-lambda-nodejs");
class SpaceStack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        this.api = new aws_apigateway_1.RestApi(this, 'SpaceApi');
        this.spacesTable = new GenericTable_1.GenericTable('spacesTable', 'spaceId', this);
        const helloLambda = new aws_lambda_1.Function(this, 'helloLambda', {
            runtime: aws_lambda_1.Runtime.NODEJS_18_X,
            code: aws_lambda_1.Code.fromAsset((0, path_1.join)(__dirname, '..', 'services', 'hello')),
            handler: 'hello.main'
        });
        const helloLambdaNodeJs = new aws_lambda_nodejs_1.NodejsFunction(this, 'helloLambdaNodeJs', {
            entry: ((0, path_1.join)(__dirname, '..', 'services', 'node-lambda', 'Hello.ts')),
            handler: 'handler'
        });
        // Hello Api lambda integration
        const helloLambdaIntegration = new aws_apigateway_1.LambdaIntegration(helloLambda);
        const helloLambdaResource = this.api.root.addResource('hello');
        helloLambdaResource.addMethod('GET', helloLambdaIntegration);
    }
}
exports.SpaceStack = SpaceStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3BhY2VTdGFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIlNwYWNlU3RhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQWdEO0FBRWhELHVEQUFtRjtBQUNuRiwrQkFBNEI7QUFDNUIsK0RBQXdFO0FBQ3hFLGlEQUE4QztBQUM5QyxxRUFBK0Q7QUFHL0QsTUFBYSxVQUFXLFNBQVEsbUJBQUs7SUFVakMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQjtRQUN2RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQVRuQixRQUFHLEdBQUcsSUFBSSx3QkFBTyxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVwQyxnQkFBVyxHQUFHLElBQUksMkJBQVksQ0FDbEMsYUFBYSxFQUNiLFNBQVMsRUFDVCxJQUFJLENBQ1AsQ0FBQTtRQUtHLE1BQU0sV0FBVyxHQUFHLElBQUkscUJBQWMsQ0FBQyxJQUFJLEVBQUUsYUFBYSxFQUFFO1lBQ3hELE9BQU8sRUFBRSxvQkFBTyxDQUFDLFdBQVc7WUFDNUIsSUFBSSxFQUFFLGlCQUFJLENBQUMsU0FBUyxDQUFDLElBQUEsV0FBSSxFQUFDLFNBQVMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQ2hFLE9BQU8sRUFBRSxZQUFZO1NBQ3hCLENBQUMsQ0FBQTtRQUVGLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxrQ0FBYyxDQUFDLElBQUksRUFBRSxtQkFBbUIsRUFBRTtZQUNwRSxLQUFLLEVBQUUsQ0FBQyxJQUFBLFdBQUksRUFBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDckUsT0FBTyxFQUFFLFNBQVM7U0FDckIsQ0FBQyxDQUFBO1FBR0YsK0JBQStCO1FBQy9CLE1BQU0sc0JBQXNCLEdBQUcsSUFBSSxrQ0FBaUIsQ0FBQyxXQUFXLENBQUMsQ0FBQTtRQUNqRSxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUM5RCxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLHNCQUFzQixDQUFDLENBQUE7SUFDaEUsQ0FBQztDQUVKO0FBL0JELGdDQStCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YWNrLCBTdGFja1Byb3BzIH0gZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcclxuaW1wb3J0IHsgQ29kZSwgRnVuY3Rpb24gYXMgTGFtYmRhRnVuY3Rpb24sIFJ1bnRpbWUgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtbGFtYmRhJztcclxuaW1wb3J0IHsgam9pbiB9IGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgeyBMYW1iZGFJbnRlZ3JhdGlvbiwgUmVzdEFwaSB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1hcGlnYXRld2F5JztcclxuaW1wb3J0IHsgR2VuZXJpY1RhYmxlIH0gZnJvbSAnLi9HZW5lcmljVGFibGUnO1xyXG5pbXBvcnQgeyBOb2RlanNGdW5jdGlvbiB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEtbm9kZWpzJztcclxuXHJcblxyXG5leHBvcnQgY2xhc3MgU3BhY2VTdGFjayBleHRlbmRzIFN0YWNre1xyXG5cclxuICAgIHByaXZhdGUgYXBpID0gbmV3IFJlc3RBcGkodGhpcywgJ1NwYWNlQXBpJyk7XHJcblxyXG4gICAgcHJpdmF0ZSBzcGFjZXNUYWJsZSA9IG5ldyBHZW5lcmljVGFibGUoXHJcbiAgICAgICAgJ3NwYWNlc1RhYmxlJyxcclxuICAgICAgICAnc3BhY2VJZCcsXHJcbiAgICAgICAgdGhpc1xyXG4gICAgKVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBTdGFja1Byb3BzKSB7XHJcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcylcclxuXHJcbiAgICAgICAgY29uc3QgaGVsbG9MYW1iZGEgPSBuZXcgTGFtYmRhRnVuY3Rpb24odGhpcywgJ2hlbGxvTGFtYmRhJywge1xyXG4gICAgICAgICAgICBydW50aW1lOiBSdW50aW1lLk5PREVKU18xOF9YLFxyXG4gICAgICAgICAgICBjb2RlOiBDb2RlLmZyb21Bc3NldChqb2luKF9fZGlybmFtZSwgJy4uJywgJ3NlcnZpY2VzJywgJ2hlbGxvJykpLFxyXG4gICAgICAgICAgICBoYW5kbGVyOiAnaGVsbG8ubWFpbidcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBjb25zdCBoZWxsb0xhbWJkYU5vZGVKcyA9IG5ldyBOb2RlanNGdW5jdGlvbih0aGlzLCAnaGVsbG9MYW1iZGFOb2RlSnMnLCB7XHJcbiAgICAgICAgICAgIGVudHJ5OiAoam9pbihfX2Rpcm5hbWUsICcuLicsICdzZXJ2aWNlcycsICdub2RlLWxhbWJkYScsICdIZWxsby50cycpKSxcclxuICAgICAgICAgICAgaGFuZGxlcjogJ2hhbmRsZXInXHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuXHJcbiAgICAgICAgLy8gSGVsbG8gQXBpIGxhbWJkYSBpbnRlZ3JhdGlvblxyXG4gICAgICAgIGNvbnN0IGhlbGxvTGFtYmRhSW50ZWdyYXRpb24gPSBuZXcgTGFtYmRhSW50ZWdyYXRpb24oaGVsbG9MYW1iZGEpXHJcbiAgICAgICAgY29uc3QgaGVsbG9MYW1iZGFSZXNvdXJjZSA9IHRoaXMuYXBpLnJvb3QuYWRkUmVzb3VyY2UoJ2hlbGxvJylcclxuICAgICAgICBoZWxsb0xhbWJkYVJlc291cmNlLmFkZE1ldGhvZCgnR0VUJywgaGVsbG9MYW1iZGFJbnRlZ3JhdGlvbilcclxuICAgIH1cclxuXHJcbn0iXX0=